// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240207202212_auth")]
    partial class auth
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.26");

            modelBuilder.Entity("Data.Entities.AddressEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "City1",
                            PostalCode = "100-000",
                            Region = "Region1",
                            Street = "Street1"
                        },
                        new
                        {
                            Id = 2,
                            City = "City2",
                            PostalCode = "200-000",
                            Region = "Region2",
                            Street = "Street2"
                        },
                        new
                        {
                            Id = 3,
                            City = "City3",
                            PostalCode = "300-000",
                            Region = "Region3",
                            Street = "Street3"
                        },
                        new
                        {
                            Id = 4,
                            City = "City4",
                            PostalCode = "400-000",
                            Region = "Region4",
                            Street = "Street4"
                        },
                        new
                        {
                            Id = 5,
                            City = "City5",
                            PostalCode = "500-000",
                            Region = "Region5",
                            Street = "Street5"
                        },
                        new
                        {
                            Id = 6,
                            City = "City6",
                            PostalCode = "600-000",
                            Region = "Region6",
                            Street = "Street6"
                        },
                        new
                        {
                            Id = 7,
                            City = "City7",
                            PostalCode = "700-000",
                            Region = "Region7",
                            Street = "Street7"
                        },
                        new
                        {
                            Id = 8,
                            City = "City8",
                            PostalCode = "800-000",
                            Region = "Region8",
                            Street = "Street8"
                        },
                        new
                        {
                            Id = 9,
                            City = "City9",
                            PostalCode = "900-000",
                            Region = "Region9",
                            Street = "Street9"
                        },
                        new
                        {
                            Id = 10,
                            City = "City10",
                            PostalCode = "1000-000",
                            Region = "Region10",
                            Street = "Street10"
                        });
                });

            modelBuilder.Entity("Data.Entities.ProducerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AddressId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Producers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 1,
                            Description = "Description for Producer1",
                            Name = "Producer1"
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 2,
                            Description = "Description for Producer2",
                            Name = "Producer2"
                        },
                        new
                        {
                            Id = 3,
                            AddressId = 3,
                            Description = "Description for Producer3",
                            Name = "Producer3"
                        },
                        new
                        {
                            Id = 4,
                            AddressId = 4,
                            Description = "Description for Producer4",
                            Name = "Producer4"
                        },
                        new
                        {
                            Id = 5,
                            AddressId = 5,
                            Description = "Description for Producer5",
                            Name = "Producer5"
                        },
                        new
                        {
                            Id = 6,
                            AddressId = 6,
                            Description = "Description for Producer6",
                            Name = "Producer6"
                        },
                        new
                        {
                            Id = 7,
                            AddressId = 7,
                            Description = "Description for Producer7",
                            Name = "Producer7"
                        },
                        new
                        {
                            Id = 8,
                            AddressId = 8,
                            Description = "Description for Producer8",
                            Name = "Producer8"
                        },
                        new
                        {
                            Id = 9,
                            AddressId = 9,
                            Description = "Description for Producer9",
                            Name = "Producer9"
                        },
                        new
                        {
                            Id = 10,
                            AddressId = 10,
                            Description = "Description for Producer10",
                            Name = "Producer10"
                        });
                });

            modelBuilder.Entity("Data.Entities.ProductEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProducerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ProductionDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProducerId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Description for Product1",
                            Name = "Product1",
                            Price = 68.407324222651200m,
                            ProducerId = 2,
                            ProductionDate = new DateTime(2023, 11, 3, 21, 22, 12, 596, DateTimeKind.Local).AddTicks(861)
                        },
                        new
                        {
                            Id = 2,
                            Description = "Description for Product2",
                            Name = "Product2",
                            Price = 42.624632834533300m,
                            ProducerId = 1,
                            ProductionDate = new DateTime(2023, 7, 24, 21, 22, 12, 596, DateTimeKind.Local).AddTicks(897)
                        },
                        new
                        {
                            Id = 3,
                            Description = "Description for Product3",
                            Name = "Product3",
                            Price = 58.445745718876700m,
                            ProducerId = 2,
                            ProductionDate = new DateTime(2023, 12, 4, 21, 22, 12, 596, DateTimeKind.Local).AddTicks(900)
                        },
                        new
                        {
                            Id = 4,
                            Description = "Description for Product4",
                            Name = "Product4",
                            Price = 57.680881018378700m,
                            ProducerId = 2,
                            ProductionDate = new DateTime(2023, 10, 13, 21, 22, 12, 596, DateTimeKind.Local).AddTicks(902)
                        },
                        new
                        {
                            Id = 5,
                            Description = "Description for Product5",
                            Name = "Product5",
                            Price = 19.585271908281800m,
                            ProducerId = 1,
                            ProductionDate = new DateTime(2023, 9, 18, 21, 22, 12, 596, DateTimeKind.Local).AddTicks(905)
                        },
                        new
                        {
                            Id = 6,
                            Description = "Description for Product6",
                            Name = "Product6",
                            Price = 50.761556261678300m,
                            ProducerId = 5,
                            ProductionDate = new DateTime(2023, 5, 13, 21, 22, 12, 596, DateTimeKind.Local).AddTicks(908)
                        },
                        new
                        {
                            Id = 7,
                            Description = "Description for Product7",
                            Name = "Product7",
                            Price = 5.6319429234150200m,
                            ProducerId = 5,
                            ProductionDate = new DateTime(2024, 1, 14, 21, 22, 12, 596, DateTimeKind.Local).AddTicks(911)
                        },
                        new
                        {
                            Id = 8,
                            Description = "Description for Product8",
                            Name = "Product8",
                            Price = 20.238381118896900m,
                            ProducerId = 4,
                            ProductionDate = new DateTime(2023, 11, 21, 21, 22, 12, 596, DateTimeKind.Local).AddTicks(913)
                        },
                        new
                        {
                            Id = 9,
                            Description = "Description for Product9",
                            Name = "Product9",
                            Price = 56.741507856684400m,
                            ProducerId = 4,
                            ProductionDate = new DateTime(2023, 10, 10, 21, 22, 12, 596, DateTimeKind.Local).AddTicks(915)
                        },
                        new
                        {
                            Id = 10,
                            Description = "Description for Product10",
                            Name = "Product10",
                            Price = 51.933134355946400m,
                            ProducerId = 1,
                            ProductionDate = new DateTime(2023, 2, 10, 21, 22, 12, 596, DateTimeKind.Local).AddTicks(919)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "f278d32d-bd62-4e09-aefa-8eb1cc451599",
                            ConcurrencyStamp = "f278d32d-bd62-4e09-aefa-8eb1cc451599",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "c6e7905e-5da3-4c7d-bbd1-0b4297aa56f3",
                            ConcurrencyStamp = "c6e7905e-5da3-4c7d-bbd1-0b4297aa56f3",
                            Name = "user",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3fd8734d-2fda-4812-bd37-91ac50b81cb3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ceb29e55-3d54-4bf5-8042-b0e54178691d",
                            Email = "admin@wsei.edu.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@WSEI.EDU.PL",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAENjT5GQ2hdbggT0fXFZQzSrtwfJWgcJ8WVW2WQlrQjTRm9slEj9d/0lNZ0za9MvIOA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b5beed6a-e37c-43eb-a7a5-1d1bc2de0449",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "63a16537-e634-4e1a-bf07-264187f4158e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9249b722-6a50-4a2b-b0b2-635ff3b6a011",
                            Email = "user@wsei.edu.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@WSEI.EDU.PL",
                            NormalizedUserName = "USER",
                            PasswordHash = "AQAAAAEAACcQAAAAEMz8UMEI42wfjDTqZSz6O4t0xXkyd2Ggm9jU5Bl7EKHl4k9FzkWxyP/M+ZCSdklu9g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "39fe3fe3-7a47-4923-bdb2-c805e3565f50",
                            TwoFactorEnabled = false,
                            UserName = "user"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "3fd8734d-2fda-4812-bd37-91ac50b81cb3",
                            RoleId = "f278d32d-bd62-4e09-aefa-8eb1cc451599"
                        },
                        new
                        {
                            UserId = "63a16537-e634-4e1a-bf07-264187f4158e",
                            RoleId = "c6e7905e-5da3-4c7d-bbd1-0b4297aa56f3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Data.Entities.ProducerEntity", b =>
                {
                    b.HasOne("Data.Entities.AddressEntity", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Data.Entities.ProductEntity", b =>
                {
                    b.HasOne("Data.Entities.ProducerEntity", "Producer")
                        .WithMany("Products")
                        .HasForeignKey("ProducerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producer");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Entities.ProducerEntity", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
